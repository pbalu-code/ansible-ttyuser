---
# tasks file for ttyuser
- name: Check getenforce path
  shell:
    cmd: which getenforce
  changed_when: false
  failed_when: false
  register: pthgetenforce

- name: Query Selinux state
  shell:
    cmd: "{{ pthgetenforce.stdout }}"
  register: getenforce
  changed_when: false
  when: pthgetenforce.rc == 0

- name: Install Selinux Python components
  package:
    name: libselinux-python
  when:
    - pthgetenforce.rc == 0
    - getenforce.stdout == 'Enforcing'

- name: Manage users if them are not presents
  user:
    name: '{{ item.name }}'
    password: '{{ item.password | default(omit) }}'
    update_password: on_create
    shell: '{{ item.shell | default(omit) }}'
    state: '{{ item.state | default(present) }}'
    append: "{{ item.groups is defined | ternary('yes', omit) }}"
    group: '{{ item.group | default(omit) }}'
    groups: '{{ item.groups | default(omit) }}'
    remove: "{{ item.remove_homedir | default('no') }}"
    #local: yes
  loop: '{{ TTYUSER_users }}'
  loop_control:
    label: "{{ item.name }}"

- name: Manage SSH authorized_keys
  ansible.posix.authorized_key:
    user: '{{ item.name }}'
    key: '{{ item.pubkeys }}'
  loop: '{{ TTYUSER_users }}'
  loop_control:
    label: "{{ item.name }}"

- name: Set sudoers
  lineinfile:
    path: /etc/sudoers
    line: '{{ item }} ALL=(ALL) NOPASSWD:ALL'
    regexp: "^{{ item }}\\s*.*"
  with_items: '{{ TTYUSER_sudoers }}'

- name: Remove unwanted sudoers users
  lineinfile:
    path: /etc/sudoers
    state: absent
    regexp: '^{{ item }}\s+.*ALL$'
  with_items: '{{ TTYUSER_revoke_sudoers }}'

- name: Check access.conf is present
  stat:
    path: /etc/security/access.conf
  register: accesscnf

- name: Manage access.conf
  lineinfile:
    path: /etc/security/access.conf
    line: '+ : {{ item.name }} : ALL'
    insertbefore: '^-\s*:\s*ALL\s*:\s*ALL.*$'
  loop: '{{ TTYUSER_users }}'
  loop_control:
    label: "{{ item.name }}"
  when: accesscnf.stat.exists
