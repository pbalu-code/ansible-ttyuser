---
# tasks file for ttyuser
- name: Check getenforce path
  ansible.builtin.shell:
    cmd: which getenforce
  changed_when: false
  failed_when: false
  register: pthgetenforce

- name: Query Selinux state
  ansible.builtin.shell:
    cmd: "{{ pthgetenforce.stdout }}"
  register: getenforce
  changed_when: false
  when: pthgetenforce.rc == 0

- name: Install Selinux Python components
  ansible.builtin.package:
    name: libselinux-python
  when:
    - pthgetenforce.rc == 0
    - getenforce.stdout == 'Enforcing'

- name: Add default values where are missing
  ansible.builtin.set_fact:
    TTYUSER_users: "{{ item | combine({'state': present}) }}"
  vars:
    present: "{{ item.state | default('present') }}"
  loop: '{{ TTYUSER_users }}'
  loop_control:
    label: "{{ item.name }}"
  register: tmp_TTYUSER_users
  no_log: true

- name: Update TTYUSER_users
  set_fact:
    TTYUSER_users: "{{ tmp_TTYUSER_users.results | map(attribute='ansible_facts.TTYUSER_users') | list }}" 
  no_log: true

- name: Manage groups
  ansible.builtin.group:
    gid: '{{ item.gid | default(omit) }}'
    name: '{{ item.name }}'
    system: '{{ item.system | default(omit) }}'
  loop: '{{ TTYUSER_groups }}'
  loop_control:
    label: "{{ item.name }}"
  when: TTYUSER_groups is defined

- name: Manage users
  ansible.builtin.user:
    name: '{{ item.name }}'
    password: '{{ item.password | default(omit) }}'
    update_password: "{{ item.update_password | default('on_create') }}"
    password_lock: '{{ item.password_lock | default(omit) }}'
    shell: '{{ item.shell | default(omit) }}'
    state: '{{ item.state | default("present") }}'
    append: "{{ item.groups is defined | ternary('yes', omit) }}"
    group: '{{ item.group | default(item.name) }}'
    groups: '{{ item.groups | default(omit) }}'
    home: '{{ item.home | default(omit) }}'
    uid: '{{ item.uid | default(omit) }}'
    comment: '{{ item.comment | default(omit) }}'
    remove: "{{ item.remove_homedir | default('no') }}"
    password_expire_max: "{{ item.password_expire_max | default(omit) }}"
    password_expire_min: "{{ item.password_expire_min | default(omit) }}"
    force: yes
    # local: yes
  loop: '{{ TTYUSER_users }}'
  loop_control:
    label: "{{ item.name }}"
  no_log: true

- name: Manage SSH authorized_keys
  ansible.posix.authorized_key:
    user: '{{ item.name }}'
    key: '{{ item.pubkeys }}'
    exclusive: '{{ item.exclusive_pubkey | default(false) }}'
  loop: '{{ TTYUSER_users }}'
  loop_control:
    label: "{{ item.name }}"
  when: 
    - item.pubkeys is defined and ( item.pubkeys | length > 10 )
    - item.state != 'absent'"
  no_log: true

- name: Ensure .ssh directory is present
  ansible.builtin.file:
    path: "{{ item.home | default( '/home/' + item.name ) }}/.ssh"
    state: directory
    owner: "{{ item.name }}"
    group: "{{ item.group | default( item.name ) }}"
    mode: '0700'
  loop: '{{ TTYUSER_users }}'
  loop_control:
    label: "{{ item.name }}"
  when: item.state != 'absent'
  no_log: true

- name: Include SSH key gen
  ansible.builtin.include_tasks:
    file: sshkey.yml
  loop: '{{ TTYUSER_users }}'
  loop_control:
    label: "{{ item.name }}"
  when: 
    - not ( item.pubkeys is defined and ( item.pubkeys | length > 10 ))
    - item.state != 'absent'
    - item.skip_keygen is not defined or not item.skip_keygen
  no_log: true

- name: Set sudoers
  ansible.builtin.lineinfile:
    path: /etc/sudoers
    line: '{{ item }} ALL=(ALL) NOPASSWD:ALL'
    regexp: "^{{ item }}\\s*.*"
  with_items: '{{ TTYUSER_sudoers }}'
  when: TTYUSER_sudoers is defined and ( TTYUSER_sudoers | length>0 )

- name: Remove unwanted sudoers users
  ansible.builtin.lineinfile:
    path: /etc/sudoers
    state: absent
    regexp: '^{{ item }}\s+.*ALL$'
  with_items: '{{ TTYUSER_revoke_sudoers }}'
  when: TTYUSER_revoke_sudoers is defined and ( TTYUSER_revoke_sudoers | length>0 )

- name: Check access.conf is present
  stat:
    path: /etc/security/access.conf
  register: accesscnf

- name: Manage access.conf
  ansible.builtin.lineinfile:
    path: /etc/security/access.conf
    line: '+ : {{ item.name }} : ALL'
    insertbefore: '^-\s*:\s*ALL\s*:\s*ALL.*$'
  loop: '{{ TTYUSER_users }}'
  loop_control:
    label: "{{ item.name }}"
  when: 
    - accesscnf.stat.exists
    - TTYUSER_update_access_conf
  no_log: true
